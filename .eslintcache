[{"/Users/jacob/projects/MV23-Devs/MVHW/src/index.js":"1","/Users/jacob/projects/MV23-Devs/MVHW/src/Router.jsx":"2","/Users/jacob/projects/MV23-Devs/MVHW/src/serviceWorker.js":"3","/Users/jacob/projects/MV23-Devs/MVHW/src/firebase.js":"4","/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Profile.jsx":"5","/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Home.jsx":"6","/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Tutor.jsx":"7","/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Teacher.jsx":"8","/Users/jacob/projects/MV23-Devs/MVHW/src/screens/QuestionPage.jsx":"9","/Users/jacob/projects/MV23-Devs/MVHW/src/util.js":"10","/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Feed.jsx":"11","/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Meeting.jsx":"12","/Users/jacob/projects/MV23-Devs/MVHW/src/Question.jsx":"13","/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Answer.jsx":"14"},{"size":1229,"mtime":1608782529623,"results":"15","hashOfConfig":"16"},{"size":2260,"mtime":1610518177492,"results":"17","hashOfConfig":"16"},{"size":5086,"mtime":1606266794057,"results":"18","hashOfConfig":"16"},{"size":713,"mtime":1606266794047,"results":"19","hashOfConfig":"16"},{"size":18878,"mtime":1610491596399,"results":"20","hashOfConfig":"16"},{"size":21145,"mtime":1610518177495,"results":"21","hashOfConfig":"16"},{"size":14249,"mtime":1606266794057,"results":"22","hashOfConfig":"16"},{"size":25759,"mtime":1608782529625,"results":"23","hashOfConfig":"16"},{"size":11088,"mtime":1610520230674,"results":"24","hashOfConfig":"16"},{"size":183,"mtime":1606266794058,"results":"25","hashOfConfig":"16"},{"size":19709,"mtime":1610519016656,"results":"26","hashOfConfig":"16"},{"size":663,"mtime":1606266794055,"results":"27","hashOfConfig":"16"},{"size":2845,"mtime":1610518785058,"results":"28","hashOfConfig":"16"},{"size":709,"mtime":1610518771271,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"tf3j16",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/jacob/projects/MV23-Devs/MVHW/src/index.js",[],["61","62"],"/Users/jacob/projects/MV23-Devs/MVHW/src/Router.jsx",[],"/Users/jacob/projects/MV23-Devs/MVHW/src/serviceWorker.js",[],"/Users/jacob/projects/MV23-Devs/MVHW/src/firebase.js",[],"/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Profile.jsx",[],"/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Home.jsx",["63","64","65","66","67","68","69"],"import React, {\n  Component,\n  useState,\n  useRef\n} from 'react';\nimport {\n  Link,\n  withRouter\n} from 'react-router-dom'\nimport { translate } from \"../util.js\"\nimport '../App.css';\nimport './css/profile.css'\nimport Feed from \"./Feed.jsx\";\nimport Question from '../Question';\nimport {\n  Navbar, Nav, NavItem, NavbarToggler, Collapse, Card, CardImg, CardBody, Button, Form, FormGroup, Label, Input, FormText, Badge, Spinner, Modal, ModalHeader, ModalBody, ModalFooter, Dropdown, DropdownToggle, DropdownMenu, DropdownItem\n} from 'reactstrap';\nimport Sidebar from 'react-sidebar';\nimport firebase from '../firebase.js';\nimport { storage } from '../firebase.js';\nimport jacob from \"../img/jacob.jpg\";\nimport saarang from \"../img/saarang.jpg\";\nimport jason from \"../img/jason.jpg\";\nimport atli from \"../img/atli-sucks.jpg\";\n\n//const classes = require(\"../classes.json\").classes;\n\nconst db = firebase.firestore();\n\n// dark theme\nconst theme1 = {\n  header: {\n    backgroundColor: '#222',\n    color: '#fff',\n  },\n  body: {\n    backgroundColor: '#333',\n  },\n  footer: {\n    backgroundColor: '#222',\n    color: '#ccc',\n  },\n  line: {\n    backgroundColor: '#fff',\n  },\n  link: {\n    color: '#fff',\n  }\n};\n\nconst SidebarComponent = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const fileinputref = useRef(null);\n\n  const createClassItems = () => {\n    let items = [];\n    let classes = translate(props.language, \"classes\");\n    for (let i = 0; i < (classes.length); i++) {\n      items.push(<option key={i}>{classes[i]}</option>);\n    }\n    return items;\n  }\n\n  const toggle = () => setIsOpen(!isOpen);\n  return (\n    <Sidebar\n      sidebar={\n        <section>\n          <div className=\"sbox\">\n            <Button id=\"languageButton\" className=\"newBtn\" onClick={props.changeLanguage} >{translate(props.language, \"language\")}</Button>\n            <Button className=\"newBtn\" color=\"light\" style={{ marginLeft: \"10px\" }} onClick={() => window.open(\"https://tinyurl.com/y5rhw7gw\", '_blank')}>{translate(props.language, \"feedback\")}</Button>\n          </div>\n          <div className=\"sbox\">\n            <p>{translate(props.language, \"createPost\")}</p>\n            <hr style={theme1.line} />\n            <Form onSubmit={props.submitHandler}>\n              <FormGroup>\n                <Label for=\"text\">{translate(props.language, \"text\")}</Label>\n                <Input type=\"textarea\" name=\"text\" id=\"text\" onChange={props.changeHandler} />\n                {props.errormessage}\n                <br />\n                <input type=\"file\" id=\"uploadFile\" ref={fileinputref} onChange={props.handleFileInput} />\n                <br />\n                {\n                  props.image !== null ?\n                    <img id=\"previewImage\" alt={props.image} width=\"100px\" />\n                    :\n                    null\n                }\n                <br />\n                <Label for=\"tags\"><Badge color=\"danger\">{translate(props.language, \"tag\")}</Badge></Label>\n                <Input type=\"select\" name=\"select\" id=\"tags\">\n                  {createClassItems()}\n                </Input>\n                <br />\n                <Label id=\"anonymousBoxLabel\" for=\"anonymousBox\">{translate(props.language, \"anonymous\")}</Label>\n                <span id=\"spacer1\"></span>\n                <input type=\"checkbox\" id=\"anonymousBox\" name=\"anonymousBox\" onChange={props.handleAnonymousInput} />\n              </FormGroup>\n              <Button className=\"newBtn\" color=\"light\" block>{translate(props.language, \"submitButton\")}</Button>\n            </Form>\n          </div>\n\n          <div className=\"sbox\" id=\"last\">\n            <a href=\"https://github.com/MV23-Devs/MVHW\" className='link-dark'>Github</a>\n            <br />\n            <a href=\"https://www.instagram.com/mvhs.2023/?hl=en\" className='link-dark'>Instagram</a>\n            <br />\n            <h6 className=\"copyright\">Copyright (c) 2020 Mountain View 2023 Developers</h6>\n            <AboutModal language={props.language} />\n          </div>\n        </section>\n      }\n      open={isOpen}\n      onSetOpen={setIsOpen}\n      styles={{sidebar: { background: \"#222\", zIndex: \"10\", right: \"80%\", top: \"80px\", border: \"0px black\", borderRadius: \"20px\"}}}\n    >\n      <Button color=\"secondary\" onClick={() => setIsOpen(true)} id=\"sidebarButton\">\n        Create A Post\n      </Button>\n    </Sidebar>\n  )\n}\n\n\nconst SocialDropdown = (props) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n\n  return (\n    <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n      <DropdownToggle color=\"light\" caret>\n        Social\n      </DropdownToggle>\n      <DropdownMenu>\n        <DropdownItem><a href={props.github}>Github</a></DropdownItem>\n        {\n          props.linkedin !== null ?\n            <DropdownItem><a href={props.linkedin}>Linkedin</a></DropdownItem>\n            :\n            null\n        }\n        <DropdownItem><a href={props.instagram}>Instagram</a></DropdownItem>\n        <DropdownItem><a href={props.gmail}>Mail</a></DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n}\n\nexport const ProfilePictureDropdown = (props) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n\n  return (\n    <Dropdown isOpen={dropdownOpen} toggle={toggle} id=\"socialDrop\">\n      <DropdownToggle\n        tag=\"span\"\n        data-toggle=\"dropdown\"\n        aria-expanded={dropdownOpen}\n      >\n        {props.children}\n      </DropdownToggle>\n      <DropdownMenu id=\"ProfileMenu\">\n        <Link to=\"/profile\"><DropdownItem >Profile</DropdownItem></Link>\n        <DropdownItem onClick={props.signout}>Sign Out</DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n}\n\n\nconst AboutModal = (props) => {\n  const {\n    className,\n    language\n  } = props;\n\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  return (\n    <div>\n      <Button className=\"newBtn\" color=\"light\" block onClick={toggle}>{translate(language, \"who\")}</Button>\n      <Modal returnFocusAfterClose={false} isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader toggle={toggle}>Us</ModalHeader>\n        <ModalBody>\n          <div className=\"cardcontainer\">\n            <Card className=\"card\">\n              <CardImg top width=\"100%\" src={jason} alt=\"Jason Zhang\" />\n              <CardBody>\n                <h3 className=\"aboutname\">Jason Zhang</h3>\n                <SocialDropdown github=\"https://github.com/minisounds\" linkedin={null} instagram=\"https://www.instagram.com/jason.zhang848/?hl=en\" gmail=\"https://mail.google.com/mail/u/0/?view=cm&fs=1&tf=1&source=mailto&to=jzscuba@gmail.com\"></SocialDropdown>\n              </CardBody>\n            </Card>\n            <Card className=\"card\">\n              <CardImg top width=\"100%\" src={jacob} alt=\"Jacob Ismael\" />\n              <CardBody>\n                <h3 className=\"aboutname\">Jacob Ismael</h3>\n                <SocialDropdown github=\"https://github.com/jacobismael\" linkedin=\"https://www.linkedin.com/in/jacob-ismael-9b2b431b0/\" instagram=\"https://www.instagram.com/jacobismael16/?hl=en\" gmail=\"https://mail.google.com/mail/u/0/?view=cm&fs=1&tf=1&source=mailto&to=jacob.ismael@gmail.com\"></SocialDropdown>\n              </CardBody>\n            </Card>\n            <Card className=\"card\">\n              <CardImg top width=\"100%\" src={saarang} alt=\"Saarang Bondalapati\" />\n              <CardBody>\n                <h3 className=\"aboutname\">Saarang Bondalapati</h3>\n                <SocialDropdown github=\"https://github.com/saarangbond\" linkedin=\"https://www.linkedin.com/in/saarang-bondalapati-77b1371b6/\" instagram=\"https://www.instagram.com/saarang.bond.05/?hl=en\" gmail=\"https://mail.google.com/mail/u/0/?view=cm&fs=1&tf=1&source=mailto&to=saarang.bondalapati@gmail.com\"></SocialDropdown>\n              </CardBody>\n            </Card>\n            <Card className=\"card\">\n              <CardImg top width=\"100%\" src={atli} alt=\"Atli Arnarsson\" />\n              <CardBody>\n                <h3 className=\"aboutname\">Atli Arnarsson</h3>\n                <SocialDropdown github=\"https://github.com/atli-a\" linkedin={null} instagram=\"\" gmail=\"https://mail.google.com/mail/u/0/?view=cm&fs=1&tf=1&source=mailto&to=atli.arnarsson@gmail.com\"></SocialDropdown>\n              </CardBody>\n            </Card>\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <Button className=\"newBtn\" color=\"secondary\" onClick={toggle}>Close</Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      d: new Date(),\n      questions: [],\n      filteredQuestions: [],\n      width: 0,\n      height: 0,\n      errormessage: '',\n      loading_data: true,\n      loaded: 0,\n      update: 0,\n      image: null,\n      url: \"\",\n      progress: 0,\n      user: {\n        auth: null,\n        name: 'Anonymous',\n      },\n      filterBy: \"popularity\",\n      anonymousPost: false,\n    };\n\n\n    this.fileinputref = React.createRef()\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({ user: { auth: user, name: user.displayName } })\n      } else {\n        this.setState({ user: { auth: user, name: 'Anonymous' } })\n      }\n    });\n\n\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n\n    db.collection(\"questions\")\n      .onSnapshot((querySnapshot) => {\n        let docs = this.state.questions;\n        querySnapshot.docChanges().forEach(change => {\n          if (change.type === 'added') {\n            let doc = change.doc;\n\n            let ups = doc.data().usersUpvoted.length\n            let downs = doc.data().usersDownvoted.length\n            let votes = ups - downs;\n\n            let q = new Question(doc.data().title, JSON.parse(doc.data().auth), doc.data().timestamp, doc.id, votes, doc.data().tags, doc.data().img_url, doc.data().username);\n            docs.push(q);\n            db.collection(\"questions\").doc(doc.id).collection(\"replies\").onSnapshot(querySnapshot => {\n              querySnapshot.docs.forEach(doc => {\n                q.addAnswer(doc.data().title, JSON.parse(doc.data().author), JSON.parse(doc.data().author).displayName, doc.data().timestamp, doc.id, doc.data().author.uid)\n              })\n            })\n          } else if (change.type === 'removed') {\n            let doc = change.doc;\n            for (var i = 0; i < docs.length; i++) {\n              if (docs[i].getId() === doc.id) {\n                docs.splice(i, 1);\n              }\n            }\n          } else if (change.type === 'modified') {\n            let doc = change.doc;\n            let votes = doc.data().usersUpvoted.length - doc.data().usersDownvoted.length;\n            for (let i = 0; i < docs.length; i++) {\n              if (docs[i].getId() === doc.id) {\n                docs.splice(i, 1, new Question(doc.data().title, JSON.parse(doc.data().auth), doc.data().timestamp, doc.id, votes, doc.data().tags, doc.data().img_url, doc.data().username));\n              }\n            }\n          }\n        })\n        this.setState({ questions: docs, filteredQuestions: docs, loading_data: false })\n        if (this.state.filterBy === \"popularity\") {\n          this.orderByPopularity()\n        }\n      })\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  signinwithGoogle = () => {\n    let provider = new firebase.auth.GoogleAuthProvider();\n\n    provider.setCustomParameters({\n      'hd': 'mvla.net'\n    });\n\n    firebase.auth().signInWithPopup(provider).then((result) => {\n      //var token = result.credential.accessToken;\n      // The signed-in user info.\n      var user = result.user;\n\n      if (user.email.substring(user.email.indexOf('@') + 1) !== \"mvla.net\") {\n        firebase.auth().currentUser.delete()\n        return null;\n      }\n\n      if (result.additionalUserInfo.isNewUser) {\n        firebase.firestore()\n          .collection('users')\n          .doc(user.uid).set({\n            name: user.displayName,\n            email: user.email,\n            isTutor: false,\n            classes: []\n          }).then((docRef) => {\n            firebase.database().ref('audit log').push(new Date().toString() + \": new user joined: \" + user);\n            this.props.history.push('/profile');\n          });\n      }\n    }).catch((error) => {\n      console.error('Error Code: ' + error.code + ': ' + error.message)\n    });\n  }\n\n\n  signoutwithGoogle() {\n    firebase.auth().signOut().then(() => {\n      this.setState({ update: 0 });\n    }).catch((error) => {\n      // An error happened.\n    });\n  }\n\n  handleFileInput = e => {\n    e.preventDefault();\n    if (e.target.files[0] !== null) {\n      const image = e.target.files[0];\n      this.setState(() => ({ image }));\n      this.readURL(e.target);\n    }\n    else {\n      this.setState({ image: null })\n    }\n  };\n\n  createClassItems() {\n    let items = [];\n    let classes = translate(this.props.language, \"classes\");\n    for (let i = 0; i < (classes.length); i++) {\n      items.push(<option key={i}>{classes[i]}</option>);\n    }\n    return items;\n  }\n\n  handleAnonymousInput = (event) => {\n    let target = event.target;\n    this.setState({ anonymousPost: target.checked })\n  }\n\n  handleImageUpload = () => {\n    if (this.state.image !== null) {\n      const { image } = this.state;\n      storage.ref(`images/${image.name}`).put(image);\n      return (\n        storage\n          .ref(\"images\")\n          .child(image.name)\n          .getDownloadURL()\n      )\n    }\n    return null;\n  };\n  readURL = (input) => {\n    if (input.files && input.files[0]) {\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        document.getElementById(\"previewImage\").src = e.target.result;\n      }\n\n      reader.readAsDataURL(input.files[0]); // convert to base64 string\n    }\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    let val = event.target[\"text\"].value;\n    let t = event.target[\"select\"].value;\n    let anonymous = this.state.anonymousPost\n    if (val === \"\") {\n      let err = <FormText color=\"danger\">You cannot post nothing!</FormText>;\n      this.setState({ errormessage: err });\n    } else if (this.state.user.auth === null) {\n      let err = <FormText color=\"danger\">You have to sign in to post something</FormText>;\n      this.setState({ errormessage: err });\n    } else {\n      this.setState({ errormessage: '' });\n\n      let date = (new Date()).toString();\n      let name = \"\";\n      if (anonymous === true) {\n        name = \"Anonymous\";\n      } else {\n        name = this.state.user.name;\n      }\n      if (this.handleImageUpload() !== null) {\n        this.handleImageUpload()\n          .then(url => {\n            this.fileinputref.current.value = null\n            this.forceUpdate()\n            this.setState({ url });\n            firebase.firestore()\n              .collection('questions')\n              .add({\n                title: val,\n                img_url: this.state.url,\n                username: name,\n                auth: JSON.stringify(this.state.user.auth),\n                usersUpvoted: [],\n                usersDownvoted: [],\n                timestamp: date,\n                tags: t,\n              }).then((docRef) => {\n                firebase.firestore()\n                  .collection('users').doc(this.state.user.auth.uid).collection(\"posts\")\n                  .add({\n                    title: val,\n                    img_url: this.state.url,\n                    timestamp: date,\n                    tags: t,\n                    original: docRef.id,\n                  }).then((docRef) => {\n                    firebase.database().ref('audit log').push(date + \": created a new post\");\n                    this.setState({ image: null });\n                  });\n                firebase.database().ref('audit log').push(date + \": created a new post\");\n                this.setState({ image: null });\n              });\n          });\n      } else {\n        firebase.firestore()\n          .collection('questions')\n          .add({\n            title: val,\n            img_url: this.state.url,\n            username: name,\n            auth: JSON.stringify(this.state.user.auth),\n            usersUpvoted: [],\n            usersDownvoted: [],\n            timestamp: date,\n            tags: t,\n          }).then((docRef) => {\n            firebase.firestore()\n              .collection('users').doc(this.state.user.auth.uid).collection(\"posts\")\n              .add({\n                title: val,\n                img_url: this.state.url,\n                timestamp: date,\n                tags: t,\n                original: docRef.id,\n              }).then((docRef) => {\n                firebase.database().ref('audit log').push(date + \": created a new post\");\n                this.setState({ image: null });\n              });\n            firebase.database().ref('audit log').push(date + \": created a new post\");\n          });\n      }\n\n      this.setState({ update: 0 });\n      event.target[\"text\"].value = \"\";\n    }\n  }\n\n  changeHandler = (event) => {\n    let val = event.target.value;\n    this.setState({ text: val });\n  }\n\n  handleSearch = (e) => {\n    let value = e.target.value\n    if (value === \"\") {\n      this.setState({ filteredQuestions: this.state.questions })\n    } else {\n      this.setState({ filteredQuestions: this.state.questions.filter(item => item.getText().toLowerCase().includes(value.toLowerCase())) })\n    }\n  }\n\n  changeLanguage = () => {\n    this.props.languageChangeHandler();\n  }\n\n  render() {\n\n    return (\n      <React.Fragment>\n\n        <div className=\"height\"></div>\n\n        <div id=\"titleArea\" style={theme1.header}>\n          <p id=\"title\">MVHW</p>\n          <input type=\"search\" name=\"Search\" id=\"searchBar\" placeholder=\"Search\" onChange={this.handleSearch} />\n          {/* <Button id=\"tutorButton\" className=\"newBtn\" style={{marginRight: \"10px\"}}href=\"/tutoring\" >{translate(this.props.language, \"tutoring\")}</Button> */}\n          <Button className=\"newBtn\" color=\"light\" onClick={this.filterQuestionsBy}>{translate(this.props.language, \"currentFilter\")} {translate(this.props.language, this.state.filterBy)}</Button>\n          <Label for=\"text\" style={{ marginLeft: \"10px\" }}>{translate(this.props.language, \"classFilter\")}:</Label>\n          <Input type=\"select\" name=\"select\" classname=\"newBtn\" id=\"tags\" style={{ width: \"unset\", display: \"unset\", marginLeft: \"10px\" }} onChange={this.filterClass}>\n            {this.createClassItems()}\n          </Input>\n          {\n            this.state.user.auth !== null ?\n              <ProfilePictureDropdown signout={this.signoutwithGoogle}><img src={this.state.user.auth.photoURL} alt={this.state.user.name} id=\"logOut\" /></ProfilePictureDropdown>\n              :\n              <Button className=\"newBtn\" color='light' id=\"logIn\" onClick={this.signinwithGoogle}>Sign In</Button>\n          }\n        </div>\n\n        <br />\n        <br />\n        <br />\n        <br />\n\n        <SidebarComponent\n          changeLanguage={this.changeLanguage}\n          language={this.props.language}\n          handleFileInput={this.handleFileInput}\n          image={this.state.image}\n          submitHandler={this.submitHandler}\n          errormessage={this.state.errormessage}\n          handleAnonymousInput={this.handleAnonymousInput}\n        />\n\n        <div className=\"feed\">\n          {\n            console.log(this.state.user)\n          }\n          {\n            this.state.loading_data ?\n              <Spinner className=\"loader\" style={{ width: '5rem', height: '5rem' }} color=\"warning\" />\n              :\n              <Feed language={this.props.language} theme={theme1} user={this.state.user} filteredQuestions={this.state.filteredQuestions} />\n          }\n        </div>\n\n      </React.Fragment>\n    );\n  }\n\n  filterQuestionsBy = () => {\n    let temp = (this.state.filterBy === \"popularity\") ? \"none\" : \"popularity\"\n    if (temp === \"popularity\") {\n      this.orderByPopularity();\n    } else if (temp === \"none\") {\n      //nothing\n    }\n    this.setState({ filterBy: temp });\n    this.setState({ update: 0 });\n  }\n\n  orderByPopularity = () => {\n    this.setState({ filteredQuestions: this.state.filteredQuestions.sort((a, b) => b.getUpvotes() - a.getUpvotes()) });\n  }\n\n  updateFilter = (filteredQuestions) => {\n    this.setState({ filteredQuestions })\n  }\n\n  filterClass = (e) => {\n    e.preventDefault();\n    let cless = e.target.value;\n    let filtered = [];\n    if (cless !== \"None\") {\n      for (let i = 0; i < this.state.questions.length; i++) {\n        if (this.state.questions[i].getTags() === cless) {\n          filtered.push(this.state.questions[i]);\n        }\n      }\n      this.setState({ filteredQuestions: filtered })\n    } else {\n      this.setState({ filteredQuestions: this.state.questions })\n    }\n  }\n}\nexport default withRouter(Home)","/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Tutor.jsx",[],"/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Teacher.jsx",[],"/Users/jacob/projects/MV23-Devs/MVHW/src/screens/QuestionPage.jsx",["70","71"],"/Users/jacob/projects/MV23-Devs/MVHW/src/util.js",[],"/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Feed.jsx",["72","73","74"],"import React, { Component } from 'react';\nimport '../App.css';\nimport { MdArrowUpward, MdArrowDownward } from \"react-icons/md\";\nimport { Container, Row, Col, Button, Form, FormGroup, Label, FormText, Input, Badge, UncontrolledPopover, PopoverBody } from 'reactstrap';\nimport firebase from '../firebase.js';\nimport {\n  Link,\n} from 'react-router-dom'\nimport {translate} from \"../util.js\"\nimport { createImportSpecifier } from 'typescript';\n\nconst db = firebase.firestore();\n\nconst dark = {\n  backgroundColor: '#222',\n  color: '#fff',\n  line: {\n    backgroundColor: '#fff',\n  }\n};\n\nexport const Reply = (props) => {\n  const {questionItem, errorMessage, submitHandler} = props;\n  if (questionItem.getReplying() === true) {\n    return (\n      <React.Fragment>\n        <br />\n        <br />\n        <Form onSubmit={(e) => {submitHandler(e, questionItem) }}>\n          <FormGroup>\n            <Input type=\"textarea\" name=\"text\" id=\"text\"/>\n            {errorMessage}\n          </FormGroup>\n          <Button color=\"light\" block>Post Reply</Button>\n        </Form>\n      </React.Fragment>\n    )\n  }else{\n    return null;\n  }\n}\n\n/**\n * \n * @param {*} props \n */\nexport const Votes = (props) => {\n  let id = \"vote-num-\" + props.listvalue;\n  return (\n    <div>\n      <h5 id={id} className=\"upvotes-num\">{props.num}</h5>\n      <UncontrolledPopover trigger=\"legacy\" placement=\"bottom\" target={id}>\n        <PopoverBody>\n          {props.actualNumber}\n        </PopoverBody>\n      </UncontrolledPopover>\n    </div>\n  );\n}\n\nexport const deleteA = (item, answer) => {\n  db.collection(\"questions\").doc(item.getId()).collection(\"replies\").doc(answer.getId()).delete().then(() => {\n    console.log(\"deleted reply with id: \" + answer.getId())\n    item.removeAnswer(item.getId());\n  }).catch((error) => {\n    console.error(\"Error removing document: \", error);\n  });\n}\n\nexport const deleteQ = (item, userUid) => {\n  let replies = [];\n\n  //deletes all replies too???!!!\n\n  db.collection(\"questions\").doc(item.getId()).collection(\"replies\").get().then(querySnapshot => {\n    querySnapshot.docs.forEach(doc => {\n      replies.push(doc.id);\n    })\n    return replies;\n  }).then(replies => {\n    replies.forEach(id => {\n      db.collection(\"questions\").doc(item.getId()).collection(\"replies\").doc(id).delete().then(doc => {\n        console.log(\"Successfully deleted reply with id: \", id);\n      })\n    })\n  }).then(() => {\n    db.collection(\"questions\").doc(item.getId()).delete().then(() => {\n      firebase.firestore().collection(\"users\").doc(userUid).collection(\"posts\").get().then(querySnapshot => {\n        querySnapshot.docs.forEach(doc => {\n          replies.push(doc.id);\n        })\n        return replies;\n      }).then(replies => {\n        replies.forEach(id => {\n          firebase.firestore().collection(\"users\").doc(userUid).collection(\"posts\").doc(id).delete().then(doc => {\n            console.log(\"Successfully deleted post in user section with id: \", id);\n          })\n        })\n      }).catch((error) => {\n        console.error(\"Error removing document: \", error);\n      })\n    }).catch((error) => {\n      console.error(\"Error removing document: \", error);\n    })\n  });\n}\n\n// Function that Renders User Info\nexport class RenderUser extends Component {\n  state = {\n    isTutor: false,\n    username: \"\",\n    displayUser: true,\n    initialized: false,\n    isMounted: null,\n    firstUpdate: false,\n  }\n  /*\n  componentDidMount() {\n    if (this.props.uid) {\n      firebase.firestore().collection(\"users\").doc(this.props.uid).get().then(doc => {\n        if(doc.data()){\n          if (doc.data().isTutor === true) {\n            this.setState({ isTutor: true })\n          }\n          this.setState({ username: doc.data().name })\n          if (this.props.currentUser) {\n            if(this.props.currentUser.auth) {\n              if (this.props.currentUser.auth.uid === this.props.uid) {\n                this.setState({ username: <Badge color='secondary'>you</Badge> })\n              }\n            }\n          }\n        }else{\n          \n        }\n      })\n    }\n  }\n  */\n  \n  componentDidMount(){\n    this.setState({isMounted: true})\n  }\n  \n  componentDidUpdate(prevProps){\n    //console.log(\"change: \", prevProps.uid !== this.props.uid)\n    if (this.props.uid && ( !this.state.firstUpdate ||  prevProps.uid !== this.props.uid)) {\n      this._asyncRequest = firebase.firestore().collection(\"users\").doc(this.props.uid).get().then(doc => {\n        let isTutor, username;\n        if(doc.data()){\n          username = doc.data().name;\n          if (doc.data().isTutor === true) {\n            isTutor = true;\n          }else{\n            isTutor = false;\n          }\n          //doc.id and this.props.uid switching or rotating somehow??\n          \n          \n          \n        }else{\n          username = \"[deleted-user]\";\n          isTutor = false;\n        }\n        if(this.state.isMounted){\n          this.setState({displayUser: {isTutor, username}})\n        }\n      }).catch(err => {\n        console.log(err);\n      })\n      this.setState({firstUpdate: true})\n    }\n  }\n  \n  componentWillUnmount(){\n    if(this._asyncRequest){\n     this.setState({isMounted: false})\n    }\n  }\n  \n  render() {\n    let username = this.props.username;\n    if (this.props.currentUser) {\n      if(this.props.currentUser.auth) {\n        if (this.props.currentUser.auth.uid === this.props.uid) {\n          username = <Badge color='secondary'>you</Badge>\n        }\n      }\n    }\n    if(this.state.displayUser){\n      return (\n        <React.Fragment>\n          <span>{username}</span>\n          {\n            /*\n            this.state.displayUser.isTutor === true ?\n  \n              <Badge color=\"success\">AVID TUTOR</Badge>\n              :\n              null\n            */\n          }\n        </React.Fragment>\n      )\n    }else{\n      return null;\n    }\n  }\n}\n\nclass QuestionComponent extends Component{\n  state={}\n  render(){\n    const {i, item, deletedata, tag, upvotes, upvote, downvote, submitHandler} = this.props;\n    return (\n      <li style={dark} className=\"questionBox\">\n        <Row>\n          <Col xs=\"1\" className=\"updown\">\n            <button style={dark} onClick={() => upvote(true, i)} className=\"voteButton\"><MdArrowUpward /></button>\n            <Votes num={item.getUpvotes()} actualNumber={item.getUpvotes()} listvalue={i} />\n            <button style={dark} onClick={() => upvote(false, i)} className=\"voteButton\"><MdArrowDownward /></button>\n          </Col>\n          <Col xs=\"11\">\n            <div style={dark} onClick={(e) => this.props.callBoth(item)}>\n              <RenderUser uid={item.getUser().uid} currentUser={this.props.user} username={item.getUsername()}/>\n              <h6 className=\"date-time\">{item.getTimeStamp()}</h6>\n              <Link to={`question/${item.getId()}`}><Button color=\"light\" className=\"seeFull\">{translate(this.props.language, \"seeFullThread\")}</Button></Link>\n              <h4>Question: {item.getText()}  {tag}</h4>\n              {\n                item.getImgUrl() !== \"\" ?\n                  <img src={item.getImgUrl()} alt={item.getImgUrl()} className=\"post-img\" />\n                  :\n                  null\n              }\n              {this.props.renderAnswer(item)}\n            </div>\n            <hr style={dark.line} />\n            <span className=\"links\" onClick={(e) => this.props.openReply(item) }>{translate(this.props.language, \"reply\")}</span>\n            {deletedata}\n\n\n            <Reply questionItem={item} submitHandler={submitHandler} errorMessage={this.state.errormessage}/>\n          </Col>\n        </Row>\n      </li>\n    )\n  }\n}\n\nexport default class Feed extends Component {\n  state = {\n    update: 0,\n    d: new Date(),\n    notification: '',\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <ul className=\"feed-list\">\n          <Container>\n            {\n              this.props.filteredQuestions.map(\n                (item, i) => {\n                  \n                  let color = '';\n                  switch (item.getTags()) {\n                    case 'Math':\n                      color = 'info';\n                      break;\n                    case 'Science':\n                      color = 'warning';\n                      break;\n                    case 'English':\n                      color = 'danger';\n                      break;\n                    case 'History':\n                      color = 'success';\n                      break;\n                    case 'Computer Science':\n                      color = 'primary';\n                      break;\n\n                    default:\n                      color = 'secondary';\n                      break;\n                  }\n                  let tag = <Badge color={color}>{item.getTags()}</Badge>;\n                  if (item.getTags() === \"None\") {\n                    tag = null;\n                  }\n\n                  let upvotes = item.getUpvotes() + \"\";\n\n                  if (item.getUpvotes() >= 1000) {\n                    upvotes = ((item.getUpvotes() / 1000)).toFixed(1) + \"k\";\n                  }\n\n                  let deletedata = null;\n                  if (this.props.user.auth !== null) {\n                    if (this.props.user.auth.uid === item.getUser().uid) {\n                      deletedata = (\n                        <span>\n                          <span> | </span>\n                          <span className=\"links\" onClick={() => this.deleteQ(item)}>{translate(this.props.language, \"delete\")}</span>\n                        </span>\n                      );\n                    }\n                  }\n\n                  return (\n                    <QuestionComponent \n                      key={i}\n                      i={i}\n                      item={item}\n                      user={this.props.user}\n                      tag={tag}\n                      deletedata={deletedata}\n                      upvotes={upvotes}\n                      renderAnswer={this.renderAnswer}\n                      openReply={this.openReply}\n                      language={this.props.language}\n                      callBoth={this.callBoth}\n                      upvote={this.upvote}\n                      downvote={this.downvote}\n                      submitHandler={this.submitHandler}\n                    />\n                  );\n                }\n              )\n            }\n          </Container>\n        </ul>\n      </React.Fragment >\n    )\n  }\n\n  upvoteAnswer = (i, a) => {\n    if (this.props.user.auth !== null) {\n      let tempUsersUpvoted = []\n      let tempUsersDownvoted = []\n      let answerObject = this.props.filteredQuestions[i].getAllAnswers()[a];\n      let up = answerObject.getUpvotes();\n      db.collection(\"questions\").doc(this.props.filteredQuestions[i].getId()).collection(\"replies\")\n        .doc(answerObject.getId()).get().then(doc => {\n          tempUsersUpvoted = doc.data().usersUpvoted;\n          tempUsersDownvoted = doc.data().usersDownvoted;\n          if (tempUsersUpvoted.indexOf(this.props.user.auth.uid) === -1) {\n            this.props.filteredQuestions[i].getAllAnswers[a].upvote();\n            tempUsersUpvoted.push(this.props.user.auth.uid);\n            if (tempUsersDownvoted.indexOf(this.props.user.auth.uid) > -1) {\n              tempUsersDownvoted = tempUsersDownvoted.filter(item => (item !== this.props.user.auth.uid ? true : false))\n            }\n            db.collection(\"questions\").doc(this.props.filteredQuestions[i].getId()).collection(\"replies\").doc(answerObject.getId()).update({\n              upvotes: up + 1,\n              usersUpvoted: tempUsersUpvoted,\n              usersDownvoted: tempUsersDownvoted,\n            })\n          } else {\n            console.log(\"You already upvoted!\")\n          }\n        })\n\n      this.setState({ update: 0 })\n    } else {\n      var provider = new firebase.auth.GoogleAuthProvider();\n\n      firebase.auth().signInWithPopup(provider).catch((error) => {\n        console.error('Error Code ' + error.code + ': ' + error.message)\n      });\n    }\n  }\n\n\n  upvote = (isUpvote, i)  => {\n    if (this.props.user.auth.uid) {\n      firebase.firestore().collection(\"questions\").doc(this.props.filteredQuestions[i].getId()).get().then(doc => {\n        let addTo = isUpvote ? doc.data().usersUpvoted : doc.data().usersDownvoted;\n        let removeFrom = isUpvote ? doc.data().usersDownvoted : doc.data().usersUpvoted;\n        if (addTo.indexOf(this.props.user.auth.uid) === -1) {\n          addTo.push(this.props.user.auth.uid);\n          if (removeFrom.indexOf(this.props.user.auth.uid) > -1) {\n            removeFrom = removeFrom.filter(item => (item !== this.props.user.auth.uid ? true : false))\n          }\n          console.log(\"addto: \", addTo);\n          console.log(\" removefrom: \", removeFrom);\n          firebase.firestore().collection(\"questions\").doc(this.props.filteredQuestions[i].getId()).update({\n            usersUpvoted: isUpvote ? addTo : removeFrom,\n            usersDownvoted: isUpvote ? removeFrom : addTo,\n          })\n        } else {\n          console.log(\"You already upvoted!\")\n        }\n        this.setState({ update: 0 });\n      })\n    } else {\n      var provider = new firebase.auth.GoogleAuthProvider();\n      firebase.auth().signInWithPopup(provider).catch((error) => {\n        console.error('Error Code ' + error.code + ': ' + error.message)\n      });\n    }\n  }\n\n  /*\n  upvote = (i) => {\n    if (this.props.user.auth !== null) {\n      let tempUsersUpvoted = []\n      let tempUsersDownvoted = []\n      let up = this.props.filteredQuestions[i].getUpvotes();\n      db.collection(\"questions\").doc(this.props.filteredQuestions[i].getId()).get().then(doc => {\n        tempUsersUpvoted = doc.data().usersUpvoted;\n        tempUsersDownvoted = doc.data().usersDownvoted;\n        if (tempUsersUpvoted.indexOf(this.props.user.auth.uid) === -1) {\n          if(tempUsersDownvoted.indexOf(this.props.user.auth.uid) !== -1){\n            this.props.filteredQuestions[i].upvote();\n          }\n          this.props.filteredQuestions[i].upvote();\n          tempUsersUpvoted.push(this.props.user.auth.uid);\n          if (tempUsersDownvoted.indexOf(this.props.user.auth.uid) > -1) {\n            tempUsersDownvoted = tempUsersDownvoted.filter(item => (item !== this.props.user.auth.uid ? true : false))\n          }\n          db.collection(\"questions\").doc(this.props.filteredQuestions[i].getId()).update({\n            upvotes: up + 1,\n            usersUpvoted: tempUsersUpvoted,\n            usersDownvoted: tempUsersDownvoted,\n          })\n        } else {\n          console.log(\"You already upvoted!\")\n        }\n      })\n    } else {\n      var provider = new firebase.auth.GoogleAuthProvider();\n\n      firebase.auth().signInWithPopup(provider).catch((error) => {\n        console.error('Error Code ' + error.code + ': ' + error.message)\n      });\n    }\n  }\n\n  downvote = (i) => {\n    if (this.props.user.auth !== null) {\n      let tempUsersUpvoted = []\n      let tempUsersDownvoted = []\n      let up = this.props.filteredQuestions[i].getUpvotes();\n      //this.props.filteredQuestions[i].downvote();\n      db.collection(\"questions\").doc(this.props.filteredQuestions[i].getId()).get().then(doc => {\n        tempUsersUpvoted = doc.data().usersUpvoted;\n        tempUsersDownvoted = doc.data().usersDownvoted;\n        if (tempUsersDownvoted.indexOf(this.props.user.auth.uid) === -1) {\n          if(tempUsersUpvoted.indexOf(this.props.user.auth.uid) !== -1){\n            this.props.filteredQuestions[i].downvote();\n          }\n          this.props.filteredQuestions[i].downvote();\n          tempUsersDownvoted.push(this.props.user.auth.uid);\n          if (tempUsersUpvoted.indexOf(this.props.user.auth.uid) > -1) {\n            tempUsersUpvoted = tempUsersUpvoted.filter(item => (item !== this.props.user.auth.uid ? true : false))\n          }\n          db.collection(\"questions\").doc(this.props.filteredQuestions[i].getId()).update({\n            upvotes: up - 1,\n            usersUpvoted: tempUsersUpvoted,\n            usersDownvoted: tempUsersDownvoted,\n          })\n        } else {\n          console.log(\"You already downvoted!\")\n        }\n      })\n    } else {\n      var provider = new firebase.auth.GoogleAuthProvider();\n\n      firebase.auth().signInWithPopup(provider).catch((error) => {\n        console.error('Error Code ' + error.code + ': ' + error.message)\n      });\n    }\n  }\n  */\n\n  isIn = (item, array) => {\n    for (let elem in array) {\n      if (item === elem) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  deleteQ = (item) => {\n    console.log(\"before: \", this.props.filteredQuestions)\n    deleteQ(item, this.props.user.auth.uid);\n    console.log(\"after: \", this.props.filteredQuestions)\n    this.setState({ update: 1 });\n  }\n\n  callBoth = (item) => {\n    item.click();\n    this.setState({update:0})\n  }\n\n  openReply = (item) => {\n    item.reply();\n    this.setState({ update: 1 })\n  }\n\n  openInnerReply = (item1) => {\n    item1.replyInner();\n    //item1.click();\n\n    this.setState({ update: 1 })\n  }\n\n  renderInnerReply = (item1) => {\n    if (item1.getReplyingInner() === true) {\n      return (\n        <React.Fragment>\n          <Form onSubmit={this.submitHandler}>\n            <FormGroup>\n              <Label for=\"text\">Text:</Label>\n              <Input type=\"textarea\" name=\"text\" id=\"text\"/>\n              {this.state.errormessage}\n              <br />\n              <Label for=\"tags\"><Badge color=\"info\">Optional</Badge> Tag:</Label>\n            </FormGroup>\n            <Button color={this.state.theme === 1 ? 'light' : 'dark'} block>Submit</Button>\n          </Form>\n        </React.Fragment>\n      )\n    }\n  }\n\n  submitHandler = (event, item) => {\n    event.preventDefault();\n    let val = event.target[\"text\"].value;\n\n    if (val === \"\") {\n      let err = <FormText color=\"danger\">You cannot post nothing!</FormText>;\n      this.setState({ errormessage: err });\n    } else if (this.props.user.auth === null) {\n      let err = <FormText color=\"danger\">You have to sign in to post something</FormText>;\n      this.setState({ errormessage: err });\n    } else {\n      this.setState({ errormessage: '' });\n\n\n      // used Reply Database code\n\n      if (this.props.user.auth !== null) {\n        firebase.firestore().collection('questions').doc(item.getId()).collection('replies').add({\n          title: event.target[\"text\"].value,\n          author: JSON.stringify(this.props.user.auth),\n          upvotes: 0,\n          downvotes: 0,\n          timestamp: item.getTime(),\n        }).then(doc => {\n\n          item.addAnswer(val, JSON.stringify(this.props.user.auth), item.getTime(), doc.id);\n        })\n      }\n\n\n      // this.setState({ update: 0 });\n      this.openReply(item)\n      event.target[\"text\"].value = \"\";\n    }\n  }\n\n  renderAnswer = (item1) => {\n    let user = <RenderUser uid={item1.getFirstAnswer().getUid()} currentUser={this.props.user}></RenderUser>;\n\n    // Save this code for later use when implementing replying to replies\n\n    // let respondable = (\n    //   <Form onSubmit={this.submitHandler}>\n    //     <FormGroup>\n    //       <Label for=\"text\">Text:</Label>\n    //       <Input type=\"textarea\" name=\"text\" id=\"text\"/>\n    //       {this.state.errormessage}\n    //     </FormGroup>\n    //     <Button color={this.props.theme === 1 ? 'light' : 'dark'} block>Submit</Button>\n    //   </Form>\n    // );\n\n    if (item1.getFirstAnswer().getUsername() === \"bot\") {\n      user = <h6>User: <Badge color=\"secondary\">bot</Badge></h6>;\n      // respondable = null;\n    }\n    if (item1.getClicked() === true) {\n      return (\n        <React.Fragment>\n          <div id=\"answerBox\" style={dark}>\n            {user}\n            <h5>Answer: {item1.getFirstAnswer().getText()}</h5>\n          </div>\n        </React.Fragment>\n      )\n    }\n\n  }\n}\n","/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Meeting.jsx",[],"/Users/jacob/projects/MV23-Devs/MVHW/src/Question.jsx",[],"/Users/jacob/projects/MV23-Devs/MVHW/src/screens/Answer.jsx",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":16,"column":3,"nodeType":"81","messageId":"82","endLine":16,"endColumn":9},{"ruleId":"79","severity":1,"message":"83","line":16,"column":11,"nodeType":"81","messageId":"82","endLine":16,"endColumn":14},{"ruleId":"79","severity":1,"message":"84","line":16,"column":16,"nodeType":"81","messageId":"82","endLine":16,"endColumn":23},{"ruleId":"79","severity":1,"message":"85","line":16,"column":25,"nodeType":"81","messageId":"82","endLine":16,"endColumn":38},{"ruleId":"79","severity":1,"message":"86","line":16,"column":40,"nodeType":"81","messageId":"82","endLine":16,"endColumn":48},{"ruleId":"79","severity":1,"message":"87","line":28,"column":5,"nodeType":"81","messageId":"82","endLine":28,"endColumn":10},{"ruleId":"79","severity":1,"message":"88","line":68,"column":9,"nodeType":"81","messageId":"82","endLine":68,"endColumn":15},{"ruleId":"79","severity":1,"message":"89","line":6,"column":17,"nodeType":"81","messageId":"82","endLine":6,"endColumn":27},{"ruleId":"90","severity":1,"message":"91","line":55,"column":26,"nodeType":"92","messageId":"93","endLine":55,"endColumn":28},{"ruleId":"79","severity":1,"message":"94","line":10,"column":10,"nodeType":"81","messageId":"82","endLine":10,"endColumn":31},{"ruleId":"79","severity":1,"message":"95","line":215,"column":38,"nodeType":"81","messageId":"82","endLine":215,"endColumn":45},{"ruleId":"79","severity":1,"message":"96","line":215,"column":55,"nodeType":"81","messageId":"82","endLine":215,"endColumn":63},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'Nav' is defined but never used.","'NavItem' is defined but never used.","'NavbarToggler' is defined but never used.","'Collapse' is defined but never used.","'dates' is assigned a value but never used.","'toggle' is assigned a value but never used.","'RenderUser' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'createImportSpecifier' is defined but never used.","'upvotes' is assigned a value but never used.","'downvote' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]